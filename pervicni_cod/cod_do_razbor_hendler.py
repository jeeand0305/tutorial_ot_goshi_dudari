import string, json
import requests
import logging
import time
import test_obschet_poyolkov_bez_input
from aiogram import Bot, types, Dispatcher, executor
from aiogram.dispatcher.filters import Text
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton

# from aiogram.utils import executor
# resurs
# https://mastergroosha.github.io/aiogram-2-guide/buttons/


# —Ä–∞–±–æ—á–∏–π –±–æ—Ç –Ω–∞—á–∞–ª–∞ –±–µ–∑ —Ä–∞–∑–Ω–æ—Å–∞ –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º

TOKKEN = "6224863591:AAGepg6cRgtv9wh0_Db17_sB_tfD81brgxA"#my_test_bot
TOKEN="6063224285:AAF3eblLJGQiK9BWFtHyntaKRs7UdARASxQ"#natyznie potol
# natyznoy_potolok # –Ω–∞–∑–≤–∞–ø–Ω–∏–µ –±–æ—Ç–∞
# @natyznoy_potolok_bot
# natyznoy_potolok_grup0 # –Ω–∞–∑–≤–∞–ø–Ω–∏–µ grup

bot = Bot(TOKKEN)
dp = Dispatcher(bot)


async def on_startup(_):# –ø–∞–ª–∫–∞ –≤ —Å–∫–æ–±–∫–∞—Ö —Ä–µ—à–∞–µ—Ç
    print("bot v online")

# __________–∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è —á–∞—Å—Ç—å_____________
@dp.message_handler(commands=['start'])
async def command_start(message: types.Message):
    try:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        batton_start ='–ü–û–ï–•–ê–õ–ò–ò–ò–ò'
        keyboard.add(batton_start)
        await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üëã –º–µ–Ω—è –∑–æ–≤—É—Ç —Ä–æ–±–æ—Ç \
        –í–∞—Å—è —è –ø—Ä–µ–¥—Å—Ç–æ–≤–ª—é –∫–æ–º–ø–∞–Ω–∏—é –°–ò–û–ù", reply_markup=keyboard)
        await message.answer(" –ñ–º–∏ –ü–û–ï–•–ê–õ–ò–ò–ò–ò —è —Ç–µ–±–µ –≤—Å–µ –ø–æ–∫–∞–∂—É")
    except:
        await message.reply(
            "–û–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –õ–°, –Ω–ø–∏—à–∏ –µ–º—É:\
            \nhttps://t.me/natyznoy_potolok_bot")



@dp.message_handler(lambda message: message.text == '–ü–û–ï–•–ê–õ–ò–ò–ò–ò')
async def command_start(message : types.Message):
    try:
        key_batt = types.ReplyKeyboardMarkup(resize_keyboard=True)
        key_batt1 = '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ—Ç–æ–ª–∫–∞'
        key_batt2 = '–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã'
        key_batt3 = '–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ'
        key_batt4 = '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–º–µ—Ä'
        key_batt.add(key_batt2, key_batt3).add(key_batt1, key_batt4)
        # reply_markup = keyboard –ø—Ä–æ–ø–∏—Å—ã–≤–µ—Ç —á—Ç–æ –≤—ã–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –Ω–∞–¥–ø–∏—Å—å—é
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=key_batt)
        # await message.delete()
    except:
        await message.reply(\
            "–û–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –õ–°, –Ω–ø–∏—à–∏ –µ–º—É:\
            \nhttps://t.me/natyznoy_potolok_bot")

request_u_users={
    1:"–ü—Ä–æ—à—É –≤–∞—Å —É—á–µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –≤ –º–µ—Ç—Ä–∞—Ö –ø—Ä–∏–º–µ—Ä\
     (14,23) –º–µ—Ç—Ä—ã –º–æ–∂–µ—Ç–µ –Ω–µ –ø–∏—Å–∞—Ç—å —è –≤–∞—Å –∏ —Ç–∞–∫ –ø–æ–π–º—É –ø–∏—à–∏ ()",
    2:"–í–≤–µ–¥–∏ —à–∏—Ä–∏–Ω—É –∫–æ–º–Ω–æ—Ç—ã –µ—Å–ª–∏ –Ω–µ—Ç –ø–∏—à–∏ 0 :",
    3:"–í–≤–µ–¥–∏ –¥–ª–∏–Ω—É –∫–æ–º–Ω–æ—Ç—ã –µ—Å–ª–∏ –Ω–µ—Ç –ø–∏—à–∏ 0:",
    4:"–í–≤–µ–¥–∏ –ø–ª–æ—â–∞–¥—å –∫–æ–º–Ω–æ—Ç—ã –µ—Å–ª–∏ –Ω–µ—Ç –ø–∏—à–∏ 0:",
    5:"–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª–æ–≤ –µc–ª–∏ –Ω–µ—Ç –ø–∏—à–∏ 0 :",
    6:"–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä—É–± –µ–ª–∏ –Ω–µ—Ç –ø–∏—à–∏ 0 :",
    7:"–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤ –µ–ª–∏ –Ω–µ—Ç –ø–∏—à–∏ 0 :",
    8:"–í–≤–µ–¥–∏ 1 –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –Ω–∞—Ä—É–∂–Ω–∞—è –≥–∞—Ä–¥–∏–Ω–∞ –Ω–∞ –ø–æ—Ç–æ–ª–æ–∫ –∏–ª–∏ 0 –µ—Å–ª–∏ –Ω–µ –Ω–∞–¥–æ :",
    9:"–ù—É –∏ –∑–∞–¥–∞–ª–∏ –≤—ã –º–Ω–µ –∑–∞–¥–∞—á–∫—É —Å—Ö–æ–∂–∂—É –ø–æ—Å—á–∏—Ç–∞—é"
}

sbor_input_2 = []
# —Ä–∞–±–æ—á–∏–π –∫–æ–¥
# –ù—É–∂–Ω–æ –¥–æ–¥–µ–ª–∞—Ç—å
# –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –Ω–∞–±–æ—Ä–µ –ø—Ä–æ—Å–∏–ª –ø–æ–∑–≤–æ–Ω–∏—Ç—å –≤ –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –ø—Ä–æ—Å—á–µ—Ç–∞
#  –∑–∞–∫–∏–Ω—É—Ç—å —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Ä–∞—Å—á–µ—Ç
# –Ω—É –∏ –≤—ã–¥–∞—Ç—å –ø—Ä–æ—Å—á–µ—Ç –¥–∞–Ω–Ω—ã—Ö

@dp.message_handler(lambda message:message.text=='–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ—Ç–æ–ª–∫–∞')
async def cmd_start(message: types.Message):
    # try:
    global sbor_input_2
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–º–∞—Ç–æ–≤–æ–µ", "—Å–∞—Ç–∏–Ω", "–≥–ª—è–Ω–µ—Ü"]
    keyboard.add(*buttons)
    await message.answer("–ö–∞–∫–æ–∫ –ø–æ–ª—Ç–æ—Ç–Ω–æ –≤—ã –≤—ã–±–µ—Ä–µ—Ç–µ?", reply_markup=keyboard)

# if len(sbor_input_2) < len(request_u_users):
@dp.message_handler(lambda message: message.text in ["–º–∞—Ç–æ–≤–æ–µ", "—Å–∞—Ç–∏–Ω","–≥–ª—è–Ω–µ—Ü"])
async def answer_to_user_polotno(message: types.Message):
    global sbor_input_2
    sbor_input_2.append(message.text)

    if len(sbor_input_2) < len(request_u_users) + 1:
        await message.answer(request_u_users[len(sbor_input_2)])
    @dp.message_handler(lambda message: message.text != None)
    async def answer_to_user_dlin(message: types.Message):
        global sbor_input_2
        sbor_input_2.append(message.text)
        if len(sbor_input_2) < len(request_u_users)+1:
           await message.answer(request_u_users[len(sbor_input_2)])
           print( sbor_input_2)
        if len(sbor_input_2) == 9:#len(request_u_users):
           # global sbor_input_2
           result_stoimosti_potolka={}
           # danie_na_oschet=[]
           print(sbor_input_2, "–≤—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
           danie_na_oschet = sbor_input_2
           dan_dict = test_obschet_poyolkov_bez_input.\
           poluchil_tuple_shirnu_dlinu_perim_ploshad(danie_na_oschet)
           price_poto_result = test_obschet_poyolkov_bez_input. \
               stoi_pot(dan_dict)
           if price_poto_result !=None:
               # price_gotovi="–°—Ç–æ–º–æ—Å—Ç—å –ø–æ—Ç–æ–ª–∫–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏ ",price_poto_result[1],
               #              "c—Ç–æ–º–æ—Å—Ç—å –ø–æ—Ç–æ–ª–∫–∞ co —Å–∫–∏–¥–∫o–π -15% ",price_poto_result[2]
               await message.answer(f"–°—Ç–æ–º–æ—Å—Ç—å –ø–æ—Ç–æ–ª–∫–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏ {price_poto_result[1]}\
               c—Ç–æ–º–æ—Å—Ç—å –ø–æ—Ç–æ–ª–∫–∞ co —Å–∫–∏–¥–∫o–π -15% {price_poto_result[2]}")
           sbor_input_2 = []



# otlov poluchenih zaprosov
# –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å –≤ –ø–∏—Ç–æ–Ω–µ\
# (Text(equals='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã'))
@dp.message_handler(Text(equals='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã'))
async def sion_open_command(message : types.Message):
    await bot.send_message(
        message.from_user.id, " –ï–∂–µ–¥–Ω–µ–≤–Ω–æ —Å9-00 –¥–æ \
21-00 –±–µ–∑ –í—ã—Ö–æ–¥–Ω—ã—Ö")


# –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ lambda message: message.text
@dp.message_handler(lambda message: message.text=='–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ')
async def sion_place_command(message : types.Message):
    await bot.send_message(
        message.from_user.id,\
        "–¢–¶ –ê–∑–±—É–∫–∞ —Ä–µ–º–æ–Ω—Ç–∞ –∏ –¢–¶ –ì–≤–æ–∑–¥—å")



@dp.message_handler(lambda message:\
                            message.text=='–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–º–µ—Ä')
async def key_sett_zamer(message: types.Message):
    key_return_v_osnovnoe_menu = types.InlineKeyboardButton \
        (text='–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é', callback_data='/start')
    key_batt_1 = types.ReplyKeyboardMarkup(resize_keyboard=True)
    key_locat_req = types.KeyboardButton\
        (text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é üó∫Ô∏è', request_location=True)
    key_conta_req = types.KeyboardButton\
        (text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç ‚òéÔ∏è', request_contact=True)
    key_my_cont = '–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã'
    # key_return_v_osnovnoe_menu =types.InlineKeyboardButton\
    #     (text='–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é', callback_data='/start')
    key_batt_1.add(key_conta_req, key_locat_req)\
        .add(key_my_cont, key_return_v_osnovnoe_menu)
    # reply_markup = keyboard –ø—Ä–æ–ø–∏—Å—ã–≤–µ—Ç —á—Ç–æ –≤—ã–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –Ω–∞–¥–ø–∏—Å—å—é
    await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Å–≤—è–∑–∏",
                         reply_markup=key_batt_1)


# nado testit
@dp.message_handler(lambda message:message.text=='–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã')
async def my_contakt (message: types.Message):
    await bot.send_message(message.from_user.id,
                           "–ù–∞—à–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ã  8 982 118 63 83       8 904 833 47 57")

# –ù—É–∂–Ω–æ –æ—Ç–ª–∞–¥–∏—Ç—å –±–æ—Ç–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
# @dp.message_handler(lambda message:message.text=='–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é')
# async def my_contakt (message: types.Message):
#     await bot.send_message(message.from_user.id, "/start")
#     await message.reply ("/start")
#     await message.delete()




# –æ—Ç–ª–æ–≤ –º–∞—Ç–∞
@dp.message_handler()
async def echo_send(message: types.Message):
    if {i.lower().translate(str.maketrans
    ('', '', string.punctuation))
    for i in message.text.split(' ')}.intersection(set
    (json.load(open('cenz.json')))) != set():
       await message.reply("–º–∞—Ç –∑–∞–ø—Ä–µ—â–µ–Ω")
       await message.delete()






executor.start_polling(dp, skip_updates=True, on_startup=on_startup)



# airogram rabochi cod
# @dp.message_handler()
# async def echo_send(message: types.Message):
    # –ø—Ä–æ—Å—Ç–æ —ç—Ö–æ —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª —Ç–æ –∏ –ø–æ–ª—É—á–∏–ª –æ–±—Ä–∞—Ç–Ω–æ
    #await message.answer(message.text)
    # —ç—Ö–æ –∏ –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–æ—Ç–µ–ª—è
    # await message.reply(message.text)
    # –µ—Å–ª–∏ –±–æ—Ç –≤ –≥—Ä—É–ø–µ –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–µ–±–µ –≤ –ª–∏—á–∫—É
    #await bot.send_message(message.from_user.id, message.text)

# @dp.message_handler(commands="start")
# async def cmd_start(message: types.Message):
#     keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     buttons = ["–ú–∞—Ç–æ–≤—ã–π –ø–æ—Ç–æ–ª–æ–∫", "–ì–ª—è–Ω—Ü–µ–≤—ã–π –ø–æ—Ç–æ–ª–æ–∫"]
#     keyboard.add(*buttons)
#     await message.answer("–ö–∞–∫–æ–π –ø–æ—Ç–æ–ª–æ–∫ –≤–∞—Å –∏–Ω–µ—Ç–µ—Ä–µ—Å—É–µ—Ç", reply_markup=keyboard)

# work cod
# @dp.message_handler(commands='–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ—Ç–æ–ª–∫–∞')
# async def vari_polotna(message: types.Message):
#     # resize_keyboard=True –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–æ–∫\
#     # –∏ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–ª –ø–µ—Ä–µ–º–µ–Ω—É—é
#     keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     # –Ω–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
#     polotno = "–ú–∞—Ç–æ–≤—ã–π –ø–æ—Ç–æ–ª–æ–∫"
#     glanec_polo = "–ì–ª—è–Ω—Ü–µ–≤—ã–π –ø–æ—Ç–æ–ª–æ–∫"
#     # –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –Ω–∞–∑–≤–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
#     # .add –≤ –æ–¥–∏–Ω —Ä—è–¥
#     # .input –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏—Ç—å –≤ —à–∏—Ä–∏–Ω—É
#     keyboard.add(polotno, glanec_polo)
#     # reply_markup = keyboard –ø—Ä–æ–ø–∏—Å—ã–≤–µ—Ç —á—Ç–æ –≤—ã–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –Ω–∞–¥–ø–∏—Å—å—é
#     await message.answer("–ö–∞–∫–æ–π –ø–æ—Ç–æ–ª–æ–∫ –≤–∞—Å –∏–Ω–µ—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=keyboard)
#
# work cod
# @dp.message_handler(commands=["–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã"])
# async def sion_open_command(message : types.Message):
#     await bot.send_message(
#         message.from_user.id, " –ï–∂–µ–¥–Ω–µ–≤–Ω–æ —Å9-00 –¥–æ \
# 21-00 –±–µ–∑ –í—ã—Ö–æ–¥–Ω—ã—Ö")

# keybord is bot work
# @dp.message_handler(Text(equals='start'))
# async def keybord_bot(message: types.Message):
#     key_batt = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     key_batt1 = '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ—Ç–æ–ª–∫–∞'
#     key_batt2 = '–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã'
#     key_batt3 = '–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ'
#     key_batt4 = '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–º–µ—Ä'
#     key_batt.add(key_batt2, key_batt3).add(key_batt1, key_batt4)
#     # reply_markup = keyboard –ø—Ä–æ–ø–∏—Å—ã–≤–µ—Ç —á—Ç–æ –≤—ã–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –Ω–∞–¥–ø–∏—Å—å—é
#     await message.answer("–ö–∞–∫–æ–π –ø–æ—Ç–æ–ª–æ–∫ –≤–∞—Å –∏–Ω–µ—Ç–µ—Ä–µ—Å—É–µ—Ç?",\
#                          reply_markup=key_batt)