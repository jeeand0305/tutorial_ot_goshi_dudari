import string, json
# import requests
import logging
import random
import time
import test_obschet_poyolkov_bez_input
from aiogram import Bot, types, Dispatcher, executor
from aiogram.dispatcher.filters import Text
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton


# from aiogram.utils import executor
# resurs
# https://mastergroosha.github.io/aiogram-2-guide/buttons/


# —Ä–∞–±–æ—á–∏–π –±–æ—Ç –Ω–∞—á–∞–ª–∞ –±–µ–∑ —Ä–∞–∑–Ω–æ—Å–∞ –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º

TOKKEN = "6224863591:AAGepg6cRgtv9wh0_Db17_sB_tfD81brgxA"#my_test_bot
TOKEN="6063224285:AAF3eblLJGQiK9BWFtHyntaKRs7UdARASxQ"#natyznie potol
# natyznoy_potolok # –Ω–∞–∑–≤–∞–ø–Ω–∏–µ –±–æ—Ç–∞
# @natyznoy_potolok_bot
# natyznoy_potolok_grup0 # –Ω–∞–∑–≤–∞–ø–Ω–∏–µ grup

bot = Bot(TOKKEN)
dp = Dispatcher(bot)

# —Å—Ç–∞—Ä—Ç –±–æ—Ç–∞ –ø—Ä–æ–ø–∏—Å—ã–≤–∞—Ç —á—Ç–æ –±–æ—Ç –∑–∞ —Ä–∞–±–æ—Ç–∞–ª
async def on_startup(_):# –ø–∞–ª–∫–∞ –≤ —Å–∫–æ–±–∫–∞—Ö —Ä–µ—à–∞–µ—Ç
    print("bot v online")


# –ù–∞—á–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –∫–∞—Ç–æ—Ä–æ—è –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –≤ –º–µ–Ω—é
@dp.message_handler(commands=['start'])
async def command_start(message: types.Message):
    try:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        batton_start ='–ú–µ–Ω—é'
        keyboard.add(batton_start)
        await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üëã –º–µ–Ω—è –∑–æ–≤—É—Ç —Ä–æ–±–æ—Ç \
        –í–∞—Å—è —è –ø—Ä–µ–¥—Å—Ç–æ–≤–ª—é –∫–æ–º–ø–∞–Ω–∏—é –°–ò–û–ù", reply_markup=keyboard)
        await message.answer(" –ñ–º–∏ '–ú–µ–Ω—é'—è —Ç–µ–±–µ –≤—Å–µ –ø–æ–∫–∞–∂—É")
    except:
        await message.reply(
            "–û–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –õ–°, –Ω–ø–∏—à–∏ –µ–º—É:\
            \nhttps://t.me/natyznoy_potolok_bot")


# –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è\
# —á–µ—Ä–µ–∑ –ª—è–Ω–¥—É
@dp.message_handler(lambda message: message.text == '–ú–µ–Ω—é')
async def command_start(message : types.Message):
    try:
        key_batt = types.ReplyKeyboardMarkup(resize_keyboard=True)
        key_batt1 = '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ—Ç–æ–ª–∫–∞'
        key_batt2 = '–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã'
        key_batt3 = '–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ'
        key_batt4 = '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–º–µ—Ä'
        key_batt.add(key_batt2, key_batt3).add(key_batt1, key_batt4)
        # reply_markup = keyboard –ø—Ä–æ–ø–∏—Å—ã–≤–µ—Ç —á—Ç–æ –≤—ã–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –Ω–∞–¥–ø–∏—Å—å—é
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=key_batt)
        # await message.delete()
    except:
        await message.reply(\
            "–û–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –õ–°, –Ω–ø–∏—à–∏ –µ–º—É:\
            \nhttps://t.me/natyznoy_potolok_bot")

# —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –º–æ–∂–µ—Ç –ª—É—á—à–µ —Å–¥–µ–ª–∞—Ç—å –Ω–∞ –æ–¥–∏–Ω –∏–∑ –º–æ–¥—É–ª—å –ø–æ–∫–∞ —Ç–∞–∫
request_u_users = {
    1:"–ü—Ä–æ—à—É –≤–∞—Å —É—á–µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –≤ –º–µ—Ç—Ä–∞—Ö –ø—Ä–∏–º–µ—Ä\
     (1,3) –º–µ—Ç—Ä—ã –º–æ–∂–µ—Ç–µ –Ω–µ –ø–∏—Å–∞—Ç—å —è –≤–∞—Å –∏ —Ç–∞–∫ –ø–æ–π–º—É –ø–∏—à–∏ \
     –ø–æ–Ω—è–ª –ø–∏—à–∏ 1 –Ω–µ—Ç 0",
    2:"–í–≤–µ–¥–∏ —à–∏—Ä–∏–Ω—É –∫–æ–º–Ω–æ—Ç—ã –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ –ø–∏—à–∏—Ç–µ 0 :",
    3:"–í–≤–µ–¥–∏ –¥–ª–∏–Ω—É –∫–æ–º–Ω–æ—Ç—ã –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ –ø–∏—à–∏—Ç–µ 0:",
    4:"–í–≤–µ–¥–∏ –ø–ª–æ—â–∞–¥—å –∫–æ–º–Ω–æ—Ç—ã –µ—Å–ª–∏ –≤–≤–µ–ª–∏ —à–∏—Ä–∏–Ω—É –∏ –¥–ª–∏–Ω—É –ø–∏—à–∏—Ç–µ 0:",
    5:"–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª–æ–≤ –µc–ª–∏ –Ω–µ—Ç –ø–∏—à–∏ 0 :",
    6:"–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä—É–± –µ–ª–∏ –Ω–µ—Ç –ø–∏—à–∏ 0 :",
    7:"–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤ –µ–ª–∏ –Ω–µ—Ç –ø–∏—à–∏ 0 :",
    8:"–í–≤–µ–¥–∏ 1 –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –Ω–∞—Ä—É–∂–Ω–∞—è –≥–∞—Ä–¥–∏–Ω–∞ –Ω–∞ –ø–æ—Ç–æ–ª–æ–∫ –∏–ª–∏ 0 –µ—Å–ª–∏ –Ω–µ –Ω–∞–¥–æ :",
    9:"–ù—É –∏ –∑–∞–¥–∞–ª–∏ –≤—ã –º–Ω–µ –∑–∞–¥–∞—á–∫—É —Å—Ö–æ–∂–∂—É –ø–æ—Å—á–∏—Ç–∞—é"
}


sbor_input_2 = []
# –∑–∞–ø—É—Å–∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏ –¥–µ–ª–∞–µ—Ç –ø—Ä–æ—Å—á–µ—Ç —Å –º–æ–¥—É–ª—è \
# test_obschet_poyolkov_bez_input \
# –æ—á–µ–Ω—å —á–∞—Å—Ç–æ –≤—ã–ª–µ—Ç–µ–ª —Å–µ—á–∞—Å —Ä–æ–±–æ—Ç–∞–ª
@dp.message_handler(lambda message:message.text=="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ—Ç–æ–ª–∫–∞")
async def cmd_start(message: types.Message):
    global sbor_input_2
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–º–∞—Ç–æ–≤–æ–µ", "—Å–∞—Ç–∏–Ω", "–≥–ª—è–Ω–µ—Ü"]
    battons_menu = [ '–ú–µ–Ω—é' ]
    keyboard.add(*buttons).add(*battons_menu)
    await message.answer("–í—ã–±–µ—Ä–µ—Ç –ø–æ–ª–æ—Ç–Ω–æ –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—á–∏—Ç–∞—Ç—å\
     —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –ø–æ—Ç–æ–ª–∫–∞ –∏–ª–∏ '–ú–µ–Ω—é' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞\
      –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ",\
                         reply_markup=keyboard)

#–æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–ª–æ—Ç–Ω–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–±–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤
@dp.message_handler(lambda message: message.text in ["–º–∞—Ç–æ–≤–æ–µ", "—Å–∞—Ç–∏–Ω","–≥–ª—è–Ω–µ—Ü"])
async def answer_to_user_polotno(message):
    global sbor_input_2
    sbor_input_2.append(message.text)
    if len(sbor_input_2) < len(request_u_users) + 1:
        await message.answer(request_u_users[len(sbor_input_2)])
    # —Å–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ —á—Ç–æ –≤—ã –≤–≤–æ–¥–∏—Ç–µ –∏ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    # –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å —Å–±–æ—Ä –≤—Å–µ—Ö –¥–∞–Ω—ã—Ö –∫–æ—Ç–æ—Ä—ã–µ \
    # –Ω–µ —è–≤–ª—é—Ç—Å—è —Ü–∏—Ñ—Ä–æ–π –∏–ª–∏ –∑–∞–ø—è—Ç–æ–π
    @dp.message_handler(lambda message: message.text != None)
    async def answer_to_user_dlin(message):
        global sbor_input_2
        sbor_input_2.append(message.text)
        if len(sbor_input_2) < len(request_u_users)+1:
           await message.answer(request_u_users[len(sbor_input_2)])
           print( sbor_input_2)
        if len(sbor_input_2) == 9:#len(request_u_users):
           # global sbor_input_2
           result_stoimosti_potolka={}
           # danie_na_oschet=[]
           print(sbor_input_2, "–≤—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
           danie_na_oschet = sbor_input_2
           dan_dict = test_obschet_poyolkov_bez_input.\
           poluchil_tuple_shirnu_dlinu_perim_ploshad(danie_na_oschet)
           price_poto_result = test_obschet_poyolkov_bez_input. \
               stoi_pot(dan_dict)
           if price_poto_result !=None:
               # price_gotovi="–°—Ç–æ–º–æ—Å—Ç—å –ø–æ—Ç–æ–ª–∫–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏ ",price_poto_result[1],
               #              "c—Ç–æ–º–æ—Å—Ç—å –ø–æ—Ç–æ–ª–∫–∞ co —Å–∫–∏–¥–∫o–π -15% ",price_poto_result[2]
               await message.answer(f"–°—Ç–æ–º–æ—Å—Ç—å –ø–æ—Ç–æ–ª–∫–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏ {price_poto_result[1]}\
               c—Ç–æ–º–æ—Å—Ç—å –ø–æ—Ç–æ–ª–∫–∞ co —Å–∫–∏–¥–∫o–π -15% {price_poto_result[2]}")
           sbor_input_2 = []


@dp.message_handler(Text(equals='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã'))
async def sion_open_command(message : types.Message):
    await bot.send_message(
        message.from_user.id, " –ï–∂–µ–¥–Ω–µ–≤–Ω–æ —Å9-00 –¥–æ \
21-00 –±–µ–∑ –í—ã—Ö–æ–¥–Ω—ã—Ö")


@dp.message_handler(lambda message: message.text=='–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ')
async def sion_place_command(message : types.Message):
    await bot.send_message(
        message.from_user.id,\
        "–¢–¶ –ê–∑–±—É–∫–∞ —Ä–µ–º–æ–Ω—Ç–∞ –∏ –¢–¶ –ì–≤–æ–∑–¥—å")


@dp.message_handler(lambda message:\
                            message.text=='–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–º–µ—Ä')
async def key_sett_zamer(message: types.Message):
    key_batt_1 = types.ReplyKeyboardMarkup(resize_keyboard=True)
    key_locat_req = types.KeyboardButton\
        (text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é üó∫Ô∏è', request_location=True)
    key_conta_req = types.KeyboardButton\
        (text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç ‚òéÔ∏è', request_contact=True)
    key_return_v_osnovnoe_menu = '–ú–µ–Ω—é'
    key_my_online = '–ö–∞–∫ –Ω–∞—Å –Ω–∞–π—Ç–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ'
    key_my_cont = '–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã'
    key_batt_1.add(key_conta_req, key_locat_req)\
        .add(key_my_cont, key_my_online)\
        .add(key_return_v_osnovnoe_menu)
    # reply_markup = keyboard –ø—Ä–æ–ø–∏—Å—ã–≤–µ—Ç —á—Ç–æ –≤—ã–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –Ω–∞–¥–ø–∏—Å—å—é
    await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Å–≤—è–∑–∏",
                         reply_markup=key_batt_1)

@dp.message_handler(lambda message:message.text=='–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã')
async def my_contakt (message: types.Message):
    await bot.send_message(message.from_user.id,\
        "–ù–∞—à–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ã  8 982 118 63 83  8 904 833 47 57")


@dp.message_handler(lambda message: \
                message.text=='–ö–∞–∫ –Ω–∞—Å –Ω–∞–π—Ç–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ')
async def cmd_inline_url(message: types.Message):
    # –∫–Ω–æ–ø–∫–∏ —Å–æ–±–∏—Ä–∞—é –≤ —Å–ø–∏—Å–æ–∫
    buttons = [
        types.InlineKeyboardButton(text="–ú—ã –≤ –ö–æ–Ω—Ç–∞–∫—Ç–µ",\
            url="https://vk.com/clubsion18"),
        types.InlineKeyboardButton(text="–ù–∞—à —Å–∞–π—Ç",\
            url="http://sion18.ru/")
    ]
    # –ó–∞–¥–∞–µ—Ç —à–∏—Ä–∏–Ω—É —Å—Ç—Ä–æ–∫–∏ (row_width=1)
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    # –ó–∞–Ω–æ—Å–∏–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é keyboard –∫–Ω–æ–ø–∫–∏ –≥–¥–µ .add –æ–∑–Ω–∞—á–∞–µ—Ç
    # –¥—Ä—É–≥ –ø–æ–¥ –¥—Ä—É–≥–æ–º, *buttons —Å–æ –∑–µ–∑–¥–æ—á–∫–æ–π –ø–æ—Ç–æ–º—É —á—Ç–æ –∫–∞–∫
    # *args. **kwargs
    keyboard.add(*buttons)
    await message.answer("–ö–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏", reply_markup=keyboard)

# –ø—Ä–µ–¥–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ –ø–∏—à—É –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ä–∞–±–æ—Ç –∏ –ª–æ–≥–∏–∫–∏
value = ''
old_value = ''

@dp.message_handler(commands="calculator")
async def cmd_inline_url(message: types.Message):
    # –∫–Ω–æ–ø–∫–∏ —Å–æ–±–∏—Ä–∞—é –≤ —Å–ø–∏—Å–æ–∫
    buttons = [
        types.InlineKeyboardButton(text="<-",\
                callback_data=" "),
        types.InlineKeyboardButton(text=" ",\
                callback_data="no"),
        types.InlineKeyboardButton(text="C", \
                callback_data="_"),
        types.InlineKeyboardButton(text="+/-", \
                callback_data="-1")
    ]
    buttons2 = [
        types.InlineKeyboardButton(text="7",\
                callback_data="7"),
        types.InlineKeyboardButton(text="8",\
                callback_data="8"),
        types.InlineKeyboardButton(text="9", \
                callback_data="9"),
        types.InlineKeyboardButton(text="/", \
                callback_data="/")
    ]
    buttons3 = [
        types.InlineKeyboardButton(text="4", \
                callback_data="4"),
        types.InlineKeyboardButton(text="5", \
                callback_data="5"),
        types.InlineKeyboardButton(text="6", \
                callback_data="6"),
        types.InlineKeyboardButton(text="*", \
                callback_data="*")
    ]
    buttons4 = [
        types.InlineKeyboardButton(text="1", \
                                   callback_data="1"),
        types.InlineKeyboardButton(text="2", \
                                   callback_data="2"),
        types.InlineKeyboardButton(text="3", \
                                   callback_data="3"),
        types.InlineKeyboardButton(text="-", \
                                   callback_data="-")
    ]
    buttons5 = [
        types.InlineKeyboardButton(text="0", \
                                   callback_data="0"),
        types.InlineKeyboardButton(text=",", \
                                   callback_data="."),
        types.InlineKeyboardButton(text="+", \
                                   callback_data="+"),
        types.InlineKeyboardButton(text="=", \
                                   callback_data="=")
    ]

    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.row(*buttons).row(*buttons2).row(*buttons3)\
        .row(*buttons4).row(*buttons5)
    await message.answer("–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", reply_markup=keyboard)


@dp.message_handler(commands=['text'])
async def get_messange(message):
    global value
    if value == '':
        bot.send_message(message.from_user.id, '0', reply_markup='keyboard')
    else:
        bot.send_message(message.from_user.id, value, reply_markup='keyboard')


@dp.message_handler(commands="random")
async def cmd_random(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∂–º–∏ –º–µ–Ω—è", callback_data="random_value"))
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10", reply_markup=keyboard)



@dp.callback_query_handler(text="random_value")
async def send_random_value(callback: types.CallbackQuery):
    await callback.message.answer(str(random.randint(1, 10)))
# @dp.

# @dp.callback_query_handler(func=lambda call: True)
# async def analis_danih_s_calculator(query):
#     global value, old_value
#     date= query.date
#     if date == "no":
#         pass
#     elif date == 'C':
#         value =''
#     elif date == '=':
#         value = str(eval(value))
#     else:
#         value+=date
#
#     if value != old_value:
#         if value=='':
#             bot.edit_message_text(chat_id=query.message.chat.id, \
#             message_id=query.massage.id, text='0', reply_markup='keyboard')
#         else:
#             bot.edit_message_text(chat_id=query.message.chat.id,\
#             message_id=query.massage.id, text=value,reply_markup='keyboard')
#     old_value = value

# if __name__ == '__main__':
executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
